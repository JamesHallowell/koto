#-
An implementation of the Benchmark Game's spectral norm program
https://benchmarksgame-team.pages.debian.net/benchmarksgame/description/spectralnorm.html#spectralnorm

Adapted from the Lua implementation by Mike Pall
https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/spectralnorm-lua-1.html
-#

import env list test.assert_near

A = |i, j|
  ij = i + j - 1
  1.0 / (ij * (ij - 1) * 0.5 + i)

Av = |x, y, n|
  i = 0
  y.transform |n|
    i += 1
    j = 0
    x.fold 0 |result, n|
      j += 1
      result + n * (A i j)

Atv = |x, y, n|
  i = 0
  y.transform |n|
    i += 1
    j = 0
    x.fold 0 |result, n|
      j += 1
      result + n * (A j i)

AtAv = |x, y, t, n|
  Av x t n
  Atv t y n

spectral_norm = |n|
  u = list.with_size n 1
  v = list.with_size n 0
  t = list.with_size n 0

  for _ in 0..10
    AtAv u v t n
    AtAv v u t n
  vBv, vv = 0, 0
  for ui, vi in u.zip v
    vBv = vBv + ui * vi
    vv = vv + vi * vi
  (vBv / vv).sqrt()


export main = ||
  n = match env.args.get 0
    () then 4
    arg then arg.to_number()

  result = spectral_norm n

  if (env.args.get 1) != "quiet"
    "{}".print result


export tests =
  test_5: ||
    assert_near (spectral_norm 5) 1.261218 1e-6
