import test.assert_eq

# Assigning a range to a value
r = 0..2
# Ranges can be compared
assert_eq r 0..2

# Ranges are exclusive by default, ..= creates an inclusive range
r = 0..=2
assert_eq [r] [0 1 2]

assert_eq 10 (size [10..20])
assert_eq 3 (size r)

# Indexing lists with ranges produces sub-lists
n = [0..10]
assert_eq n[2..5] [2 3 4]
assert_eq n[2..=4] [2 3 4]

# Function calls can be evaluated to find range boundaries
z = |n| n
x = [(z 10)..=(z 20)]
y = x[z(5)..(10 + 0)]
assert_eq 15 y[0]
assert_eq 5 (size y)

# Leaving off either range boundary creates a From/To range
n = [0..=10]
assert_eq n[..=2] [0 1 2]
assert_eq n[8..] [8 9 10]

# One-past-the-end can be used as a range position
assert_eq n[11..11] []

# Descending ranges can also be used
r = 2..0
assert_eq 2 (size r)
assert_eq [r] [2 1]
assert_eq [2..=0] [2 1 0]

a = [x for x in 4..=1]
assert_eq a [4 3 2 1]
