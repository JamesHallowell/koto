# Single line if statement
is_zero = |x| x == 0
if is_zero 0 then assert true
assert if is_zero 0 then true else false
a, b = if true then 10, 20 else 30, 40
assert_eq b 20


# Multiline if statement
x = true
if x
  a = 42
  assert_eq a 42

if x == false
  # This comment shouldn't break parsing
  assert false
elseif false
  assert false
else
       # ...and neither should this one
  if x == true
    assert true
      # or this one
    assert true

if true
  # functions in nested local scope can be called recursively
  fib = |n|
    if n <= 0
      0
    elseif n == 1
      1
    else
      (fib n - 1) + (fib n - 2)
  assert_eq 13 (fib 7)


####### return allows for early exit from functions
match_digit = |n|
  match_digit_nested = |n|
    for i in 0..10
      if i == n
        return i

  for i in 0..10
    if i == n
      return match_digit_nested n

x = [(match_digit i) for i in 0..3]
assert_eq x [0 1 2]

###### return supports returning multiple values
f = ||
  return -1, 1
a, b = f()
assert_eq a -1
assert_eq b 1

##### return can also be used without a value
f = ||
  if true
    return
  assert false
f()
