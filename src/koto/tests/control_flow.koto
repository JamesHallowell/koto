from test import assert assert_eq

# Single line if expression
is_zero = |x| x == 0
if is_zero 0 then assert true
assert if is_zero 0 then true else false
a, b = if true then 10, 20 else 30, 40
assert_eq b 20


# Multiline if expression
x = true
if x
  a = 42
  assert_eq a 42

if x == false
  # This comment shouldn't break parsing
  assert false
else if false
  assert false
else
       # ...and neither should this one
  if x == true
    assert true
      # or this one
    assert true


# match expression
fib = |n|
  match n
    _ if n <= 0 then 0
    1 then 1
    _ then (fib n - 1) + (fib n - 2)

assert_eq 13 (fib 7)

# match with multiple expressions
fizz_buzz = |n|
  match n % 3, n % 5
    0, 0 then "Fizz Buzz"
    0, _ then "Fizz"
    _, 0 then "Buzz"
    _ then n

x = [fizz_buzz n for n in 10..=15]
assert_eq x ["Buzz" 11 "Fizz" 13 14 "Fizz Buzz"]

# match with alternative patterns
inspect = |n|
  match n
    x if x < 0 then "negative"
    0 or 2 or 4 or 6 or 8 then "even"
    1 or 3 or 5 or 7 or 9 then "odd"
    _ then ">= 10"
assert_eq (inspect 7) "odd"
