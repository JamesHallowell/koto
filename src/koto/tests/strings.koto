import string
from test import assert assert_eq assert_ne

assert_eq "Hello" "Hello"
assert_ne "Hello" "Héllö"
assert_eq ("Hello" + ", " + "World!") "Hello, World!"

assert_eq 42.0 (string.to_number "42")
assert_eq -1.5 (string.to_number "-1.5")

x = "^"
x += "_" + "^"
assert_eq x "^_^"

assert "_" in "O_o"
assert not "@" in "O_o"

hello = "Hello"
world = "World"


####### string.format

# A string literal is expected as first argument
assert_eq "Hello, World!" (string.format "Hello, World!")

# {} is a placeholder for an argument to be included in the string
assert_eq "Hello, World!" (string.format "{}, {}!" hello world)

# Curly braces can be included in the output by escaping them with another curly brace
assert_eq "{Hello}, World!" (string.format "{{{}}}, {}!" hello world)

# Positional placeholders can be used to reference arguments by index
assert_eq "Hello World, Hello World!" (string.format "{0} {1}, {0} {1}!" hello world)

# Identifier placeholders are looked up in a map argument
assert_eq "O_o" (string.format "{first}_{second}" {first: "O", second: "o"})


####### string.slice

assert_eq "cde" (string.slice "abcdef" 2 5)
assert_eq "cdef" (string.slice "abcdef" 2)


####### string.split

assert_eq ["a" "b" "c"] (string.split "a,b,c" ",")
assert_eq ["" "x" ""] (string.split "oxo" "o")


####### string.trim

assert_eq "x" (string.trim "   x    ")
assert_eq "foo" (string.trim "foo    ")
assert_eq "bar" (string.trim "     bar")
