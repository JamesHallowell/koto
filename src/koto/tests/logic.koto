assert true and true
assert not true and false
assert not false and true
assert true or false
assert false or true

# Short circuiting applies to the boolean operators 'and' and 'or'
a = false and assert false
assert not a

a = true or assert false
assert a

###### Comparison operators
assert 1 < 2
assert 0 > -1
assert (1 + 1) <= 2
assert not (1 + 1) < 2
assert (2 * 2) >= 4
assert not (2 * 2) > 4

###### Chained comparisons
a = 5
assert 1 < a < 10
assert not 1 < a > 10

a = 1
assert 1 == a == 1

# Chained comparisons apply short-circuiting
assert not 1 > a < assert false

# Tokens in chained comparisons should only be evaluated once
make_counter = ||
  count = 0
  || count += 1
f = make_counter||
assert 0 < f|| < 2
assert_eq f|| 2

# A fiddly example with several chained comparisons
f = |x y z| if x < y < z > y > x then 0 else 1
assert f|1 2 3| < f|3 2 1| <= f|5 4 3| < 2 > f|1 2 3|
