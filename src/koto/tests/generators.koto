import iterator test.assert_eq

export tests =
  test_one_two: ||
    one_two = ||
      yield 1
      yield 2
    assert_eq [x for x in one_two()] [1 2]

  test_yield_in_loop: ||
    doubler = |xs|
      for x in xs
        yield x + x
    z = [n for n in doubler(10..=15)]
    assert_eq z [20 22 24 26 28 30]

  test_yield_multiple: ||
    enumerate = |xs|
      for i, x in 0..xs.size(), xs
        yield i, x

    z = [[i x] for i, x in enumerate 1..=3]
    assert_eq z [[0 1] [1 2] [2 3]]

  test_custom_iterator_adaptor: ||
    iterator.every_other = |iter|
      n = 0
      loop
        match iter.next()
          () then return
          value if n % 2 == 0 then yield value
        n += 1
    z = (10..15).iter().transform(|x| "{}".format x).every_other().collect()
    assert_eq z ["10" "12" "14"]
    # the adaptor can also be called via iterator.adaptor
    z = (iterator.every_other (10..15).iter().transform(|x| "{}".format x)).collect()
    assert_eq z ["10" "12" "14"]
