# For statement blocks
count = 0
for x in 0..10
  for y in -5..5 if x == y and x < 3
    assert_eq(x, y)

    # loop bodies share scope of statment
    count = count + 1

assert_eq count, 3

# Inline for statement
(assert i >= 0 and i < 3) for i in 0..3

# List comprehensions - for loop assignment captures values in a list
square = |x| x * x
c = square(x) for x in [1, 2, 3]
assert_eq c, [1, 4, 9]

filter = |xs, f| x for x in xs if f(x)
a = filter(0..20, |x| not x <= 15)
assert_eq a, [16, 17, 18, 19]

# comprehensions work with for blocks
z = for x in [7, 8, 9]
  x * x
assert_eq z, [49, 64, 81]

z = for x in 1..=3
  for y in x..(x + 3)
    y
assert_eq z, [[1, 2, 3], [2, 3, 4], [3, 4, 5]]

# Iterating works over multiple ranges
enumerate = |xs| i, x for i, x in 0..size(xs), xs

z = c for c in enumerate 100..103
assert_eq z, [[0, 100], [1, 101], [2, 102]]
z2 = c, d for c, d in enumerate 100..103
assert_eq z, z2

