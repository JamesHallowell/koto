o = { min: 0, max: || 42 }
assert_eq(42, o.max())
o2 = o
assert_eq(o, o2)

sum = 0
for i in o.min..o.max()
  sum = sum + i
assert_eq(sum, 861)

m =
  foo: 42
  bar: |x| x * x
  baz:
    foo: 99

assert_eq(m.foo, 42)
assert_eq(m.bar(9), 81)
assert_eq(m.baz.foo, 99)

m2 = m + { baz: 99 }
assert (m2.bar(2) == 4) and (m2.baz == 99)

assert_eq(list.sort map.keys m, ["bar", "baz", "foo"])


###### Maps as classes

make_o = ||
  foo: 42
  assert_foo: |self| assert_eq(self.foo, 42) # self refers to table instance

o = make_o()
o.assert_foo() # implicit self

make_o2 = ||
  make_o() +
    foo_2: 57
    assert_foo: |self| assert_eq(self.foo + self.foo_2, 99)

o2 = make_o2()
o2.assert_foo()


###### Maps captured from for loops

a = for x, y in 1..=3, 4..=6
  foo: x
  bar: y

assert_eq(a, [{foo: 1, bar: 4}, {foo: 2, bar: 5}, {foo: 3, bar: 6}])
