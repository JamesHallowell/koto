program = _{
  SOI
  ~ block*
  ~ empty_line*
  ~ EOI
}

block = @{
  empty_line*
  ~ assignment_or_expression
  ~ (next_expression)*
}
child_block = @{
  empty_line*
  ~ push_indentation
  ~ block
  ~ DROP
}

push_indentation = @{ indentation ~ PUSH(indent) }
indentation = @{ PEEK_ALL }
indent = _{ WHITESPACE+ }
empty_line = @{ NEWLINE | (WHITESPACE+ ~ NEWLINE) | (WHITESPACE* ~ comment) }

next_expression = @{ NEWLINE ~ indentation ~ assignment_or_expression }

assignment_or_expression = _{ (assignment | expressions) ~ comment? }

assignment = _{ single_assignment | multiple_assignment }
single_assignment = !{ id ~ "=" ~ expressions }
multiple_assignment = !{ ids ~ "=" ~ expressions }

expression = _{
  ( function
  | if_statement
  | for_loop
  | map
  | operation
  | call
  )
  ~ comment?
}
expressions = !{ expression ~ ("," ~ expression)* }

operation = !{
   (term ~ (op ~ term)+)
   | (term ~ (op ~ term)?)
    ~ comment?
}

op = _{
  add | subtract
  | multiply | divide | modulo
  | equal | not_equal
  | greater_or_equal | less_or_equal | greater | less
  | and | or
}

add = { "+" }
subtract = { "-" }
multiply = { "*" }
divide = { "/" }
modulo = { "%" }
equal = { "==" }
not_equal = { "!=" }
greater = { ">" }
greater_or_equal = { ">=" }
less = { "<" }
less_or_equal = { "<=" }
and = { "and" }
or = { "or" }

term = _{
  function_inline
  | flow_term
  | value_term
}

flow_term = _{
  if_inline
  | for_inline
}

value_term = _{(
  index
  | range
  | call
  | map_inline
  | list
  | string
  | number
  | boolean
  | id
  | ("(" ~ operation ~ ")")
  )
  ~ comment?
}
value_terms = !{
  value_term ~ ("," ~ value_term)*
}

if_statement = _{ if_block | if_inline }
if_block = !{
  if_keyword ~ expression
  ~ child_block
  ~ (NEWLINE* ~ "else" ~ child_block)?
}
if_inline = !{
  if_keyword ~ expression
  ~ then_keyword ~ expressions
  ~ (else_keyword ~ expressions)?
}

if_keyword = @{ "if" ~ WHITESPACE+ }
then_keyword = @{ "then" ~ WHITESPACE+ }
else_keyword = @{ "else" ~ WHITESPACE+ }

for_loop = _{ for_block | for_inline }
for_block = !{
  for_keyword ~ ids
  ~ in_keyword ~ value_terms
  ~ (if_keyword ~ operation)?
  ~ child_block
}
for_inline = !{
  value_terms
  ~ for_keyword ~ ids
  ~ in_keyword ~ value_terms
  ~ (if_keyword ~ operation)?
}

for_keyword = @{ "for" ~ WHITESPACE+ }
in_keyword = @{ "in" ~ WHITESPACE+ }

call = _{ call_with_parens | call_single_arg }
call_with_parens = ${((lookup | id) ~ call_args)}
call_args = !{
  ("(" ~ ")")
  | "(" ~ operation ~ ("," ~ operation)* ~ ")"
}
call_single_arg = ${(id ~ WHITESPACE+ ~ operation) }

function = _{ function_block | function_inline }
function_block = !{ function_args ~ child_block }
function_inline = !{ function_args ~ expressions }
function_args = {
  "|" ~ "|"
  | "|" ~ id ~ ("," ~ id)* ~ "|"
}

map_inline = !{ "{" ~ (map_entry_inline ~ ("," ~ map_entry_inline)*)?  ~"}" }
map_entry_inline = !{ id ~ ":" ~ operation }

map = @{
  empty_line*
  ~ push_indentation
  ~ map_entries
  ~ DROP
}
map_entries = @{
  empty_line*
  ~ map_entry
  ~ (next_map_entry)*
}
map_entry = _{ map_entry_block | map_entry_inline }
map_entry_block = !{ id ~ ":" ~ map }
next_map_entry = @{ NEWLINE ~ indentation ~ map_entry }

lookup = ${ id ~ "." ~ id }

list = !{
  "[" ~ "]"
  | "[" ~ operation ~ ("," ~ operation)* ~ "]"
}

range = ${ range_arg ~ range_op ~ range_arg }
range_op = { ("..=" | "..") }
range_arg = _{ number | call | index | lookup | id | ("(" ~ operation ~ ")") }

index = ${ id ~ "[" ~ operation ~ "]" }

boolean = { "true" | "false" }

number = @{
  "-"?
  ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
  ~ ("." ~ ASCII_DIGIT+)?
  ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

string = ${ "\"" ~ inner ~ "\"" }
inner = @{ char* }
char = {
  !("\"" | "\\") ~ ANY
  | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
}

id = ${ single_id ~ ("." ~ single_id)* }
single_id = @{ !(keyword ~ !id_end) ~ id_start ~ id_end* }
id_start = @{ ASCII_ALPHA }
id_end = @{ ASCII_ALPHANUMERIC | "_" }
ids = { id ~ ("," ~ id)* }

keyword = _{
  "and"
  | "else"
  | "false"
  | "for"
  | "if"
  | "in"
  | "or"
  | "then"
  | "true"
}

WHITESPACE = _{ " " | "\t" }
comment = _{ multiline_comment | inline_comment }
inline_comment = _{ "#" ~ (!NEWLINE ~ ANY)* }
multiline_comment = _{ "#-" ~ (!"-#" ~ multiline_comment* ~ ANY)* ~ "-#" }
