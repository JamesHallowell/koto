program = _{
  SOI
  ~ "\n"*
  ~ (statement ~ "\n"+)*
  ~ statement?
  ~ EOI
}

statement = _{ expression }

expression = {
  assignment
  | binary_op
  | term
}

term = _{
  "(" ~ expression ~ ")"
  | function
  | call
  | string
  | number
  | boolean
  | ident
}

boolean = { "true" | "false" }

ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

call = {
  (ident ~ parameters)
  | (ident ~ expression)
}

parameters = _{
  "(" ~ ")"
  | "(" ~ expression ~ ("," ~ expression)* ~ ")"
}

assignment = { ident ~ "=" ~ expression }

binary_op = { term ~ (arithemetic_op | logic_op) ~ expression }
arithemetic_op = {
  "+" | "-" | "/" | "*"
}

logic_op = {
  "==" | "!=" | "<=" | "<" | ">=" | ">" | "and" | "or"
}

number = @{
  "-"?
  ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
  ~ ("." ~ ASCII_DIGIT*)?
  ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

string = ${ "\"" ~ inner ~ "\"" }
inner = @{ char* }
char = {
  !("\"" | "\\") ~ ANY
  | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
}

function = {
  (ident ~ ("," ~ ident)*)? ~ function_op ~ expression*
}
function_op = { "->" }

WHITESPACE = _{ " " | "\t" }
COMMENT = _{ ("#" ~ (!"\n" ~ ANY)*) }
