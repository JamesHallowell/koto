WHITESPACE = _{ " " | "\t" }
COMMENT = _{ comment_multi | comment_single }
comment_multi = _{ "###" ~ (!"###" ~ ANY)+ ~ "###" }
comment_single = _{ "#" ~ (!NEWLINE ~ ANY)* }

keyword = _{
  "and"
  | "class"
  | "else"
  | "if"
  | "or"
  | "then"
}

program = _{ SOI ~ block* ~ NEWLINE* ~ EOI }

block = @{
  (NEWLINE | COMMENT)*
  ~ expression
  ~ (next_expression)*
}
child_block = _{ push_indentation ~ block ~ DROP }

push_indentation = ${ indentation ~ PUSH(indent) }
indentation = ${ NEWLINE+ ~ PEEK_ALL }
indent = _{ WHITESPACE+ }

expression = !{
  ( assignment
  | function
  | if_block
  | value
  )
  ~ COMMENT?
}

next_expression = _{ indentation ~ expression }

value = _{
  rhs_value | lhs_value
}

rhs_value = _{
  binary_op
}

lhs_value = _{
  "(" ~ value ~ ")"
  | index
  | call
  | if_inline
  | array
  | range
  | string
  | number
  | boolean
  | id
}

if_block = {
  if_keyword ~ value
  ~ child_block
  ~ (NEWLINE* ~ "else" ~ child_block)?
}

if_inline = {
  if_keyword ~ value
  ~ then_keyword ~ value
  ~ (else_keyword ~ value)?
}

if_keyword = @{
  "if" ~ WHITESPACE+
}

then_keyword = @{
  "then" ~ WHITESPACE+
}

else_keyword = @{
  "else" ~ WHITESPACE+
}

call = { (id ~ call_args) | (id ~ expression) }
call_args = _{
  "(" ~ ")"
  | "(" ~ expression ~ ("," ~ expression)* ~ ")"
}

assignment = { id ~ "=" ~ expression }

binary_op = { lhs_value ~ (arithemetic_op | logic_op) ~ expression }
arithemetic_op = {
  "+" | "-" | "/" | "*"
}

logic_op = {
  "==" | "!=" | "<=" | "<" | ">=" | ">" | "and" | "or"
}

function = { function_args ~ (expression | child_block) }
function_args = {
  "|" ~ "|"
  | "|" ~ id ~ ("," ~ id)* ~ "|"
}

array = {
  "[" ~ "]"
  | "[" ~ expression ~ ("," ~ expression)* ~ "]"
}

range = ${
  range_arg ~ range_op ~ range_arg
}
range_op = {
  ("..=" | "..")
}
range_arg = _{
  number | call | index | id
}

index = ${
  id ~ "[" ~ expression ~ "]"
}

boolean = { "true" | "false" }

number = @{
  "-"?
  ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
  ~ ("." ~ ASCII_DIGIT+)?
  ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

string = ${ "\"" ~ inner ~ "\"" }
inner = @{ char* }
char = {
  !("\"" | "\\") ~ ANY
  | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
}

id = @{ !(keyword ~ !id_end) ~ id_start ~ id_end* }
id_start = @{ ASCII_ALPHA }
id_end = @{ ASCII_ALPHANUMERIC | "_" }
