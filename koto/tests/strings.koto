import koto.type
from test import assert, assert_eq, assert_ne

export tests =
  test_comparisons: ||
    assert_eq "Hello", "Hello"
    assert_ne "Hello", "HÃ©llÃ¶"
    assert_eq ("Hello" + ", " + "World!"), "Hello, World!"
    assert "Hello" < "Hiyaa" and "World" <= "World!"
    assert "Hiyaa" > "Hello" and "World!" >= "World"

  test_addition: ||
    x = "^"
    x += "_" + "^"
    assert_eq x, "^_^"

  test_indexing: ||
    assert_eq "HÃ©llÃ¶"[4], "Ã¶"
    x = "TschÃ¼ss"
    assert_eq x[0..3], "Tsc"
    assert_eq x[2..=4], "chÃ¼"
    assert_eq x[4..7], "Ã¼ss"
    assert_eq x[..=3], "Tsch"
    assert_eq x[5..], "ss"
    assert_eq "ðŸ‘‹ðŸ¥³ðŸ˜†"[1], "ðŸ¥³"

  test_chars: ||
    hello = "HÃ©llÃ¶"
    assert_eq
      hello.chars().to_tuple(),
      ("H", "Ã©", "l", "l", "Ã¶")

    # chars() is the default iterator for strings
    hello_chars = []
    for c in hello
      hello_chars.push c
    assert_eq hello_chars, hello.to_list()
    assert_eq hello_chars.size(), 5

  test_contains: ||
    assert "O_o".contains("_")
    assert not "O_o".contains("@")

  test_ends_with: ||
    assert "a,b,c".ends_with("")
    assert "a,b,c".ends_with(",c")
    assert not "a,b,c".ends_with(",b")

  test_escape: ||
    x = "
"
    assert_eq x.escape(), "\\n"

  test_is_empty: ||
    assert "".is_empty()
    assert not "abc".is_empty()

  test_lines: ||
    x = "aaa
bbb
ccc"
    assert_eq x.lines().to_tuple(), ("aaa", "bbb", "ccc")

    x2 = "
xxx
yyy
zzz

"
    assert_eq x2.lines().to_tuple(), ("", "xxx", "yyy", "zzz", "")

    x3 = "foo\nbar\nbaz"
    assert_eq x3.lines().to_tuple(), ("foo", "bar", "baz")

  test_escaped_newlines: ||
    x = "foo \
         bar \
         baz"
    assert_eq x, "foo bar baz"

  test_size: ||
    # size returns the number of unicode graphemes in the string,
    # rather than the number of bytes
    assert_eq "".size(), 0
    assert_eq "Ã¸".size(), 1
    assert_eq "abcdef".size(), 6
    assert_eq "Ã¤bcdÃ©f".size(), 6

  test_slice: ||
    assert_eq ("abcdef".slice 2, 5), "cde"
    x = "abcdef".slice 2 # end index is optional
    assert_eq x, "cdef"
    assert_eq (x.slice 1, 3), "de"
    assert_eq (x.slice 10, 13), ()

  test_split: ||
    assert_eq "a,b,c".split(",").to_tuple(), ("a", "b", "c")
    assert_eq "O_O".split("O").to_tuple(), ("", "_", "")
    assert_eq "a - b - c".split(" - ").to_tuple(), ("a", "b", "c")

  test_starts_with: ||
    assert "a,b,c".starts_with("")
    assert "a,b,c".starts_with("a,")
    assert not "a,b,c".starts_with(",b")

  test_to_lowercase: ||
    assert_eq (string.to_lowercase "ABC 123"), "abc 123"
    assert_eq (string.to_lowercase "HÃ‰LLÃ–"), "hÃ©llÃ¶"

  test_to_number: ||
    x = string.to_number "42"
    assert_eq x, 42
    assert_eq type(x), "Int"

    x = string.to_number "-1.5"
    assert_eq x, -1.5
    assert_eq type(x), "Float"

  test_to_uppercase: ||
    assert_eq (string.to_uppercase "xyz 890"), "XYZ 890"
    assert_eq (string.to_uppercase "GÃ¶rlitzer StraÃŸe"), "GÃ–RLITZER STRASSE"

  test_trim: ||
    assert_eq (string.trim "   x    "), "x"
    assert_eq "foo    ".trim(), "foo"
    assert_eq "     bar".trim(), "bar"
    assert_eq "     ".trim(), ""

  test_format: ||
    hello = "Hello"
    world = "World"

    # A string literal is expected as first argument
    assert_eq "Hello, World!", (string.format "Hello, World!")

    # {} is a placeholder for an argument to be included in the string
    assert_eq "Hello, World!", ("{}, {}!".format hello, world)

    # Curly braces can be included in the output by escaping them with another curly brace
    assert_eq "{Hello}, World!", ("{{{}}}, {}!".format hello, world)

    # Positional placeholders can be used to reference arguments by index
    assert_eq "Hello World, Hello World!", ("{0} {1}, {0} {1}!".format hello, world)

    # Identifier placeholders are looked up in a map argument
    assert_eq "O_o", ("{first}_{second}".format {first: "O", second: "o"})
