import string
from test import assert assert_eq assert_ne

export tests =
  test_comparisons: ||
    assert_eq "Hello" "Hello"
    assert_ne "Hello" "Héllö"
    assert_eq ("Hello" + ", " + "World!") "Hello, World!"

  test_addition: ||
    x = "^"
    x += "_" + "^"
    assert_eq x "^_^"

  test_contains: ||
    assert "O_o".contains("_")
    assert not "O_o".contains("@")

  test_escape: ||
    x = "
"
    assert_eq x.escape() "\\n"

  test_is_empty: ||
    assert "".is_empty()
    assert not "abc".is_empty()

  test_lines: ||
    x = "aaa
bbb
ccc"
    assert_eq x.lines().to_tuple() ("aaa", "bbb", "ccc")

    x2 = "
xxx
yyy
zzz

"
    assert_eq x2.lines().to_tuple() ("", "xxx", "yyy", "zzz", "")

    x3 = "foo\nbar\nbaz"
    assert_eq x3.lines().to_tuple() ("foo", "bar", "baz")

  test_escaped_newlines: ||
    x = "foo \
         bar \
         baz"
    assert_eq x "foo bar baz"

  test_slice: ||
    assert_eq ("abcdef".slice 2 5) "cde"
    x = "abcdef".slice 2 # end index is optional
    assert_eq x "cdef"
    assert_eq (x.slice 1 3) "de"
    assert_eq (x.slice 10 13) ()

  test_split: ||
    assert_eq "a,b,c".split(",").to_tuple() ("a", "b", "c")
    assert_eq "O_O".split("O").to_tuple() ("", "_", "")

  test_to_number: ||
    assert_eq 42.0 (string.to_number "42")
    assert_eq -1.5 "-1.5".to_number()

  test_trim: ||
    assert_eq (string.trim "   x    ") "x"
    assert_eq "foo    ".trim() "foo"
    assert_eq "     bar".trim() "bar"
    assert_eq "     ".trim() ""

  test_format: ||
    hello = "Hello"
    world = "World"

    # A string literal is expected as first argument
    assert_eq "Hello, World!" (string.format "Hello, World!")

    # {} is a placeholder for an argument to be included in the string
    assert_eq "Hello, World!" ("{}, {}!".format hello world)

    # Curly braces can be included in the output by escaping them with another curly brace
    assert_eq "{Hello}, World!" ("{{{}}}, {}!".format hello world)

    # Positional placeholders can be used to reference arguments by index
    assert_eq "Hello World, Hello World!" ("{0} {1}, {0} {1}!".format hello world)

    # Identifier placeholders are looked up in a map argument
    assert_eq "O_o" ("{first}_{second}".format {first: "O", second: "o"})
