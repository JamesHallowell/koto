from test import assert, assert_eq, assert_ne

export tests =
  test_access_by_key: ||
    m = {key: "value", another_key: "another_value"}
    assert_eq m.key, "value"
    assert_eq m.another_key, "another_value"

  test_assign_by_key: ||
    m = {key: -1}
    m.key = 42
    assert_eq m.key, 42

  test_implict_key_values: ||
    foo, baz = 42, -1
    m = {foo, bar: 99, baz}
    assert_eq m.foo, 42
    assert_eq m.bar, 99
    assert_eq m.baz, -1

  test_map_iteration: ||
    m = {foo: 42, bar: -1}
    for key, value in m
      assert_ne key, ()
      assert_ne value, ()

  test_map_quoted_keys: ||
    # Quoted strings can be used for keys that would otherwise be disallowed
    x = {"for": -1, "while": 99, "20": "twenty"}
    assert_eq x."for", -1
    assert_eq x."while", 99
    assert_eq x."20", "twenty"

  test_unicode_keys: ||
    x = {}
    x.ƒöó = 123
    assert_eq x.ƒöó, 123

  test_function_value: ||
    o = {}
    o.min = || 0
    o.max = || 42
    sum = 0
    for i in o.min()..o.max()
      sum += i
    assert_eq sum, 861

  test_equality_and_shared_data: ||
    m = {foo: 42, bar: -1}
    m2 = m
    assert_eq m, m2
    m2.foo = -1
    assert_eq m, m2
    m3 = m.copy()
    m3.foo = 99
    assert_ne m, m3

  test_map_block: ||
    m =
      foo: 42
      square: |x| x * x
      baz:
        child_foo: 99
    assert_eq m.foo, 42
    assert_eq (m.square 9), 81
    assert_eq m.baz.child_foo, 99

  test_addition: ||
    m = {foo: 42}
    m2 = m + {bar: -1}
    assert_eq m2.bar, -1
    m2 += {extra: 99}
    assert_eq m2.extra, 99

  test_value_mutation: ||
    m = {}
    m.foo = 42
    m.foo /= 2
    assert_eq m.foo, 21

  test_instance_functions: ||
    make_map = ||
      foo: 42
      get_foo: |self|
        # self as first argument creates an instance function,
        # where self refers to the container value that its contained in
        self.foo

    m = make_map()
    assert_eq 42, m.get_foo() # m is implicitly passed to get_foo as an argument

    make_map_2 = ||
      make_map() +
        foo_2: 57
        get_foo_2: |self| self.foo_2
        set_foo_2: |self x| self.foo_2 = x
        sum_foo: |self| self.foo + self.foo_2

    m2 = make_map_2()
    assert_eq m2.foo, 42 # .foo takes no arguments
    assert_eq m2.get_foo_2(), 57 # .get_foo_2 receives m2 as first argument
    m2.set_foo_2 58 # .set_foo_2 receives m2 as first argument, 58 as second argument
    assert_eq m2.sum_foo(), 100

  test_instance_function_outside_of_map: ||
    m =
      foo: 42
      get_foo: |self| self.foo
    getter = m.get_foo
    assert_eq (getter m), 42

  test_map_in_list_comprehension: ||
    a = [{foo, bar} for foo, bar in 1..=3, 4..=6]
    assert_eq a, [{foo: 1, bar: 4}, {foo: 2, bar: 5}, {foo: 3, bar: 6}]

  test_map_blocks_in_if_expression: ||
    make_map = |n|
      if n >= 0
        sign: "positive"
        n: n
      else
        sign: "negative"
        n: n

    p = make_map 100
    assert_eq p.sign, "positive"
    n = make_map -100
    assert_eq n.sign, "negative"

  test_nested_inline: ||
    deep = {a: {b: {c: {d: {e: {f: 42}}}}}}
    assert_eq deep.a.b.c.d.e.f, 42
    deep.a.b.c.d.e.f = 99
    assert_eq deep.a.b.c.d.e.f, 99

  test_nested_block: ||
    deep =
      a:
        b:
          c:
            d:
              foo: -1
              set_foo: |self x| self.foo = x
    assert_eq deep.a.b.c.d.foo, -1
    deep.a.b.c.d.set_foo(42)
    assert_eq deep.a.b.c.d.foo, 42
