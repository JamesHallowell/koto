from number import pi, pi_4

@tests =
  @test creating: ||
    assert_eq (make_num4 0), (make_num4 0, 0, 0, 0)
    assert_eq (make_num2 1), (make_num2 1, 1)
    assert_eq (make_num4 (make_num2 1)), (make_num4 1, 1, 0, 0)

  @test mutation_num2: ||
    x = make_num2 10, 11
    x *= 2
    assert_eq x, (make_num2 20, 22)
    x %= 5
    assert_eq x, (make_num2 0, 2)
    x += make_num2 10
    assert_eq x, (make_num2 10, 12)

  @test mutation_num4: ||
    x = make_num4 5, 6, 7, 8
    x *= 2
    assert_eq x, (make_num4 10, 12, 14, 16)
    x %= 5
    assert_eq x, (make_num4 0, 2, 4, 1)
    x += make_num4 10
    assert_eq x, (make_num4 10, 12, 14, 11)

  @test angle: ||
    assert_eq (make_num2 0, 0).angle(), 0
    assert_eq (make_num2 1, 1).angle(), pi_4
    assert_eq (make_num2 -1, -1).angle(), pi_4 - pi

  @test length: ||
    assert_eq (make_num2 3, 4).length(), 5
    assert_eq (make_num2 -3, -4).length(), 5
    assert_eq (make_num4 2, -2, 2, -2).length(), 4

  @test lerp_num2: ||
    a = make_num2 1, 2
    b = make_num2 5, 12
    assert_eq a.lerp(b, 0.0), make_num2 1, 2
    assert_eq a.lerp(b, 0.5), make_num2 3, 7
    assert_eq a.lerp(b, 1.0), make_num2 5, 12
    assert_eq a.lerp(b, -1.0), make_num2 -3, -8
    assert_eq a.lerp(b, 2.0), make_num2 9, 22

  @test lerp_num4: ||
    a = make_num4 1, 2, -3, 0
    b = make_num4 5, 12, -43, -100
    assert_eq a.lerp(b, 0.0), make_num4 1, 2, -3, 0
    assert_eq a.lerp(b, 0.5), make_num4 3, 7, -23, -50
    assert_eq a.lerp(b, 1.0), make_num4 5, 12, -43, -100
    assert_eq a.lerp(b, -1.0), make_num4 -3, -8, 37, 100
    assert_eq a.lerp(b, 2.0), make_num4 9, 22, -83, -200

  @test max: ||
    assert_eq (make_num2 1, -1).max(), 1
    assert_eq (make_num4 3, 4, 5, -123).max(), 5

  @test min: ||
    assert_eq (make_num2 1, -1).min(), -1
    assert_eq (make_num4 3, 4, 5, -123).min(), -123

  @test normalize: ||
    assert_eq (make_num2 0, 1).normalize(), make_num2 0, 1
    assert_eq (make_num2 3, 4).normalize(), make_num2 0.6, 0.8
    assert_eq (make_num4 2, -2, 2, -2).normalize(), make_num4 0.5, -0.5, 0.5, -0.5

  @test product: ||
    assert_eq (make_num2 3, 4).product(), 12
    assert_eq (make_num4 3, 4, 5, 6).product(), 360

  @test sum: ||
    assert_eq (make_num2 1, 2).sum(), 3
    assert_eq (make_num4 1, 2, 3, 4).sum(), 10

  @test with: ||
    assert_eq (make_num2 1, 2).with(0, 99), (make_num2 99, 2)
    assert_eq (make_num4 1, 2, 3, 4).with(2, -1), (make_num4 1, 2, -1, 4)

  @test element_access_num2: ||
    x = make_num2 10, 20
    assert_eq x[0], 10
    assert_eq x[1], 20

  @test element_access_num4: ||
    x = make_num4 2, 3, 4, 5
    assert_eq x[0], 2
    assert_eq x[3], 5

  @test element_unpacking_num2: ||
    x = make_num2 1, 2
    a, b, c = x
    assert_eq a, 1
    assert_eq b, 2
    assert_eq c, ()

  @test element_unpacking_num4: ||
    x = make_num4 5, 6, 7, 8
    a, b, c, d, e = x
    assert_eq a, 5
    assert_eq b, 6
    assert_eq c, 7
    assert_eq d, 8
    assert_eq e, ()

  @test iterator_ops_num2: ||
    x = make_num2 1, 2
    assert_eq x.to_list(), [1, 2]

    i = x.iter()
    assert_eq i.next(), 1
    assert_eq i.next(), 2
    assert_eq i.next(), ()

  @test iterator_ops_num4: ||
    x = make_num4 5, 6, 7, 8
    assert_eq x.to_tuple(), (5, 6, 7, 8)

    i = x.iter()
    i.skip(2)
    assert_eq i.next(), 7
    assert_eq i.next(), 8
    assert_eq i.next(), ()
