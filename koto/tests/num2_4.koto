import test.assert_eq

export @tests =
  @test creating: ||
    assert_eq (num4 0), (num4 0, 0, 0, 0)
    assert_eq (num2 1), (num2 1, 1)
    assert_eq (num4 (num2 1)), (num4 1, 1, 0, 0)

  @test mutation_num2: ||
    x = num2 10, 11
    x *= 2
    assert_eq x, (num2 20, 22)
    x %= 5
    assert_eq x, (num2 0, 2)
    x += num2 10
    assert_eq x, (num2 10, 12)

  @test mutation_num4: ||
    x = num4 5, 6, 7, 8
    x *= 2
    assert_eq x, (num4 10, 12, 14, 16)
    x %= 5
    assert_eq x, (num4 0, 2, 4, 1)
    x += num4 10
    assert_eq x, (num4 10, 12, 14, 11)

  @test sum: ||
    assert_eq (num2 1, 2).sum(), 3
    assert_eq (num4 1, 2, 3, 4).sum(), 10

  @test element_access_num2: ||
    x = num2 10, 20
    assert_eq x[0], 10
    assert_eq x[1], 20

  @test element_access_num4: ||
    x = num4 2, 3, 4, 5
    assert_eq x[0], 2
    assert_eq x[3], 5

  @test element_mutation_num2: ||
    x = num2 1, 2

    x[0] = 99
    assert_eq x, (num2 99, 2)

    x[..] = -1
    assert_eq x, (num2 -1, -1)

  @test element_mutation_num4: ||
    x = num4 1, 2, 3, 4
    x[0] = -1
    x[3] = 123
    assert_eq x, (num4 -1, 2, 3, 123)

    x[2..] = 99
    assert_eq x, (num4 -1, 2, 99, 99)

  @test element_unpacking_num2: ||
    x = num2 1, 2
    a, b, c = x
    assert_eq a, 1
    assert_eq b, 2
    assert_eq c, ()

  @test element_unpacking_num4: ||
    x = num4 5, 6, 7, 8
    a, b, c, d, e = x
    assert_eq a, 5
    assert_eq b, 6
    assert_eq c, 7
    assert_eq d, 8
    assert_eq e, ()

  @test iterator_ops_num2: ||
    x = num2 1, 2
    assert_eq x.to_list(), [1, 2]

    i = x.iter()
    assert_eq i.next(), 1
    assert_eq i.next(), 2
    assert_eq i.next(), ()

  @test iterator_ops_num4: ||
    x = num4 5, 6, 7, 8
    assert_eq x.to_tuple(), (5, 6, 7, 8)

    i = x.iter()
    i.skip(2)
    assert_eq i.next(), 7
    assert_eq i.next(), 8
    assert_eq i.next(), ()
