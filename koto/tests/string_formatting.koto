import number.pi, test.assert_eq

export tests =
  test_format: ||
    # A string is expected as first argument for string.format
    assert_eq (string.format "Hello, World!"), "Hello, World!"

  test_placeholders: ||
    hello = "Hello"
    world = "World"

    # {} is a placeholder for an argument to be included in the string.
    assert_eq ("{}, {}!".format hello, world), "Hello, World!"

    # Curly braces can be included by escaping them with another curly brace.
    assert_eq ("{{{}}}, {}!".format hello, world), "{Hello}, World!"

    # Positional placeholders can be used to reference arguments by index.
    assert_eq ("{0} {1}, {0} {1}!".format hello, world), "Hello World, Hello World!"

    # Identifier placeholders are looked up in a map argument.
    assert_eq ("{first}_{second}".format {first: "O", second: "o"}), "O_o"

  test_dynamic_format_string: ||
    # The format string can be prepared at runtime.
    x = "{}" + ", {}"
    assert_eq (x.format "Yes", "No"), "Yes, No"

  test_precision_modifier: ||
    # The precision modifier defines the number of decimal places to show for numbers.
    assert_eq ("{:.2}".format 1), "1.00"
    assert_eq ("{:.2}".format pi), "3.14"
    assert_eq ("{0:.3}".format pi), "3.142"
    assert_eq ("{pi:.4}".format {pi}), "3.1416"

    # The precision modifier acts as a maximum width for non-number values.
    assert_eq ("{:.4}".format "äbçdef"), "äbçd"

  test_minimum_width_modifier: ||
    # The minimum width modifier ensures that a value occupies at least that
    # many characters in the output.
    assert_eq ("{:6}".format "abc"), "abc   "

    # If the result would take up more than the minimum width, then the whole
    # result is used (unless combined with the precision/maximum width modifier).
    assert_eq ("{:3}".format "abcdef"), "abcdef"
    assert_eq ("{:3.2}".format "abcdef"), "ab "

    # Numbers are right-aligned by default.
    assert_eq ("{:4}".format 1), "   1"
    assert_eq ("{:4}".format 10), "  10"
    assert_eq ("{:4}".format 100), " 100"
    assert_eq ("{:4}".format -10), " -10"

  test_alignment: ||
    # The minimum width modifier can be prefixed with an alignment modifier,
    # < - left-aligned
    # ^ - centered
    # > - right-aligned
    assert_eq ("{:<6}".format "ab"), "ab    "
    assert_eq ("{:^6}".format "ab"), "  ab  "
    assert_eq ("{:>6}".format "ab"), "    ab"

    # If the alignment modifer is prefixed with a character,
    # then that is used instead of the default ' '.
    assert_eq ("{:x<6}".format "ab"), "abxxxx"
    assert_eq ("{:-^6}".format "ab"), "--ab--"
    assert_eq ("{:ü>6}".format "ab"), "üüüüab"

  test_all_the_bells_and_whistles: ||
    assert_eq
      ("{1:_^10.2} -- {x:®>8.4}".format {x: "zyxwvut"}, (1 / 3)),
      "___0.33___ -- ®®®®zyxw"
