import map
from test import assert, assert_eq

export tests =
  test_is_empty: ||
    assert {}.is_empty()
    assert not {foo: 42}.is_empty()

  test_size: ||
    assert_eq {}.size() 0
    assert_eq {foo: 42}.size() 1

  test_contains_key: ||
    m = {foo: 42, bar: 99}
    assert (m.contains_key "foo")
    assert (m.contains_key "bar")
    assert not (m.contains_key "baz")

  test_deep_copy: ||
    m = {foo: 42, bar: {baz: 99}}
    m2 = m.deep_copy()
    m.bar.baz = 123
    assert_eq m2.bar.baz 99

  test_insert: ||
    m = {foo: 42}
    old_value = m.insert "foo" 99
    assert_eq m.foo 99
    assert_eq old_value 42

  test_insert_via_map_module: ||
    # map ops are also available in the map module,
    # which allows access to ops when a key might have a matching name.
    m = {foo: 42}
    map.insert m "foo" -1
    assert_eq m.foo -1

  test_insert_without_value: ||
    m = {foo: 42}
    m.insert "foo"
    assert_eq m.foo ()

  test_insert_non_string_key: ||
    m = {}
    m.insert 1 "one"
    m.insert 2 "two"

  test_get: ||
    m = {foo: 42}
    assert_eq (m.get "foo") 42
    assert_eq (m.get "bar") ()

  test_get_non_string_key: ||
    m = {}
    m.insert 1 "O_o"
    assert_eq (m.get 1) "O_o"
    assert_eq (m.get (num2 1 2)) ()

  test_keys: ||
    m = {foo: 42}
    assert_eq m.keys().to_tuple() ("foo",)
    m.insert 0 "zero"
    assert_eq m.keys().to_tuple() ("foo", 0)

  test_values: ||
    m = {foo: 42, bar: "O_o"}
    assert_eq m.values().to_tuple() (42, "O_o")

  test_remove: ||
    m = {foo: 42, bar: 99}
    assert_eq (m.remove "foo") 42
    assert_eq (m.remove "bar") 99
    assert_eq (m.remove "foo") ()

  test_update: ||
    m = {foo: 42}

    # update takes a function that receives the entry's current value,
    # which is then replaced with the function's result.
    m.update "foo" |x| x * 2
    assert_eq m.foo 84

    # update optionally takes a default value for missing entries,
    # an entry will be inserted with the default value before the function is called.
    assert not m.contains_key "xyz"
    m.update "xyz" 100 |x| x / 2
    assert_eq m.xyz 50
