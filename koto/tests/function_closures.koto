import test.assert_eq

export tests =
  test_value_capture_on_function_creation: ||
    multipliers = (1..=4)
      .each |i| return |n| n * i
      .to_tuple()

    assert_eq
      multipliers
        .each |multiplier| multiplier 2
        .to_tuple()
      (2, 4, 6, 8)

  test_outer_value_captured_in_nested_function: ||
    capture_test = |a, b, c|
      inner = ||
        inner2 = |x|
          x + b + c
        inner2 a
      b, c = (), () # inner and inner2 have captured their own copies of b and c
      inner()
    assert_eq (capture_test 1 2 3) 6

  test_mutable_captured_values: ||
    counter = ||
      # make a counter functor with count initialized to 0
      count = 0
      return || count += 1

    c = counter()
    c2 = counter()
    assert_eq c() 1
    assert_eq c() 2
    assert_eq c2() 1
    assert_eq c() 3
    assert_eq c2() 2
