from test import assert, assert_eq, assert_ne, assert_near

export @tests =
  @pre_test: ||
    # random.seed seeds the default generator
    random.seed 0

  @test bool: ||
    assert random.bool()
    assert not random.bool()

  @test number: ||
    assert_near random.number(), 0.024, 0.001
    assert_near random.number(), 0.982, 0.001

  @test num2_num4: ||
    assert_near random.number2(), (num2 0.024, 0.982), 0.001
    assert_near random.number4(), (num4 0.006, 0.861, 0.823, 0.186), 0.001

  @test pick: ||
    x = ["foo", "bar", "baz"]
    assert (x.contains (random.pick x))
    x = 0..10
    assert (x.contains (random.pick x))

  @test generator: ||
    get_rng_output = |rng|
      (0..10)
        .each |_| rng.pick 0..5
        .to_tuple()

    rng1 = random.generator 0
    rng2 = random.generator 0
    rng3 = random.generator 99

    output1 = get_rng_output rng1

    assert_eq output1, (get_rng_output rng2)
    assert_ne output1, (get_rng_output rng3)

    # seed can be used to reseed the unique generator
    rng3.seed 0
    assert_eq output1, (get_rng_output rng3)
