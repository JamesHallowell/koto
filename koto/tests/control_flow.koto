from test import assert assert_eq

export tests =
  test_inline_if: ||
    x = if true then 10 else 20
    assert_eq x 10

  test_inline_if_function_call: ||
    is_zero = |x| x == 0
    x = 0
    x = if is_zero 0 then 42
    assert_eq x 42
    assert if is_zero 0 then true else false

  test_inline_if_multi_assignment: ||
    a, b = if true then 10, 20 else 30, 40
    assert_eq b 20

  test_if_block: ||
    x = true
    a = 0
    if x
      a = 42
    assert_eq a 42

  test_if_else_if: ||
    x = true
    if x == false
      # This comment shouldn't break parsing
      assert false
    else if false
      assert false
    else
           # ...and neither should this one
      if x == true
        assert true
          # or this one
        assert true

  test_match: ||
    fib = |n|
      match n
        _ if n <= 0 then 0
        1 then 1
        _ then (fib n - 1) + (fib n - 2)

    assert_eq 13 (fib 7)

  test_match_multiple_expressions: ||
    fizz_buzz = |n|
      match n % 3, n % 5
        0, 0 then "Fizz Buzz"
        0, _ then "Fizz"
        _, 0 then "Buzz"
        _ then n

    x = [fizz_buzz n for n in 10..=15]
    assert_eq x ["Buzz", 11, "Fizz", 13, 14, "Fizz Buzz"]

  test_match_alternative_patterns: ||
    inspect = |n|
      match n
        x if x < 0 then "negative"
        0 or 2 or 4 or 6 or 8 then "even"
        1 or 3 or 5 or 7 or 9 then "odd"
        _ then ">= 10"
    assert_eq (inspect 7) "odd"
