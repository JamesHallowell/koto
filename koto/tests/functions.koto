from test import assert assert_eq

export tests =
  test_square: ||
    square = |x| x * x
    assert_eq 49 (square 7)
    assert_eq 100 (square -10)

  test_sum: ||
    sum = |x, y| x + y
    # Space-separated arguments
    assert_eq 21 (sum 10 11)
    # Comma-separated arguments in parentheses
    assert_eq 21 sum(10, 11)

  test_nested_function: ||
    add = |x, y|
      x2 = x
      do_add = |x, y|
        x = x + y # Nested trailing comment
        x # implicit return of last expression
      result = do_add x y
      # function arguments are locally scoped
      assert_eq x x2
      result # implicit return
    assert_eq 3 (add 1 2)

  test_captured_function: ||
    add = |x, y| x + y
    add2 = |x, y| add x y
    assert_eq (add2 90 9) 99

  test_nested_calls: ||
    add = |x, y| x + y
    assert_eq (add (add 1 1) (add -1 -1)) 0

  test_function_returning_multiple_values: ||
    f = |x| x - 1, x + 1
    a, b = f 0
    assert_eq a -1
    assert_eq b 1

  test_early_return: ||
    match_digit = |n|
      match_digit_nested = |n|
        for i in 0..10
          if i == n
            return i

      for i in 0..10
        if i == n
          return match_digit_nested n

    assert_eq
      (0..3)
        .each |i| match_digit i
        .to_tuple()
      (0, 1, 2)

  test_return_multiple_values: ||
    f = ||
      return -1, 1
    a, b = f()
    assert_eq a -1
    assert_eq b 1

  test_return_no_value: ||
    f = ||
      if true
        return
      assert false
    f()
