import iterator test.assert_eq

export tests =
  test_generator_one_two: ||
    one_two = ||
      yield 1
      yield 2
    assert_eq [x for x in one_two()] [1 2]

  test_generator_yield_in_loop: ||
    doubler = |xs|
      for x in xs
        yield x + x
    z = [n for n in doubler(10..=15)]
    assert_eq z [20 22 24 26 28 30]

  test_generator_yield_multiple: ||
    enumerate = |xs|
      for i, x in 0..xs.size(), xs
        yield i, x

    z = [[i x] for i, x in enumerate 1..=3]
    assert_eq z [[0 1] [1 2] [2 3]]

  test_collect: ||
    assert_eq (1..=3).iter().collect() [1 2 3]
    assert_eq [2 4 6].iter().collect() [2 4 6]
    assert_eq {foo: 42, bar: 99}.iter().collect() [["foo" 42] ["bar" 99]]
    doubler = |xs|
      for x in xs
        yield x * 2
    assert_eq (doubler 1..=5).collect() [2 4 6 8 10]

  test_enumerate: ||
    assert_eq (10..=12).iter().enumerate().collect() [[0 10] [1 11] [2 12]]

  test_filter: ||
    assert_eq (0..10).iter().filter(|x| x % 2 == 1).collect() [1 3 5 7 9]

  test_fold: ||
    assert_eq (1..=5).iter().fold(0 |sum x| sum + x) 15

  test_next: ||
    i = (1..10).iter()
    assert_eq i.next() 1
    assert_eq i.next() 2

  test_take: ||
    assert_eq (1..100).iter().take(5).collect() [1 2 3 4 5]
    ones = ||
      loop
        yield 1
    assert_eq ones().take(3).collect() [1 1 1]

  test_transform: ||
    assert_eq ["1" "2"].iter().transform(|x| x.to_number()).collect() [1 2]
    x = {foo: 42, bar: 99}.iter().transform(|key value| [key value])
    assert_eq x.collect() [["foo" 42] ["bar" 99]]

  test_custom_iterator_adaptor: ||
    iterator.every_other = |iter|
      n = 0
      loop
        match iter.next()
          () then return
          value if n % 2 == 0 then yield value
        n += 1
    z = (10..15).iter().transform(|x| "{}".format x).every_other().collect()
    assert_eq z ["10" "12" "14"]
    # the adaptor can also be called via iterator.adaptor
    z = (iterator.every_other (10..15).iter().transform(|x| "{}".format x)).collect()
    assert_eq z ["10" "12" "14"]
