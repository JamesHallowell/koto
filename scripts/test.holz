# This is a comment

### Multiline comments
start and end with 3 #s
###

print "World!" # This is a trailing comment

###### Basic types and logic
a = true
print a
assert a == true
assert false or (false or true)


###### Functions

# Functions are defined with || argument lists
say_hi = || print "Hi!"
say_hi()

# Arguments belong inside the ||s
# Implicit return of last statement in function
square = |x| x * x

# Muliple-argument functions must be called with parentheses
# Single-argument functions can be called with or without parentheses
print("The square of 7 is", square(7))

# Multiple arguments are separated by commas
# Multiline functions are indented after the capture list
# Functions can be nested
add = |x, y|
  x2 = x # Nested trailing comment
  do_add = |x, y|
    x = x + y
    x
  result = do_add(x, y)
  assert x == x2 # function arguments are locally scoped
  print(x, "+", y, "==", result)
  result
assert add(1, 2) == 3

# functions can call globally defined functions
add2 = |x, y| add(x, y)
assert add2(4, -4) == 0


####### Arrays
z = [10, 10 + 10, 30]
print z

assert z[1] == 20
assert z[1 - 1] == 10
y = push(z, 40, 50)
assert y[3] == 40
print y

assert length(z) == 3
assert length(y) == 5


###### Ranges

# Ranges are lazily evaluated
r = 0..5
assert length(r) == 5
print r
# ..= creates an inclusive range
y = 0..=5
assert length(y) == 6
print y
# Ranges are resolved when inserted in an array
assert length([10..20]) == 10
assert length([r]) == 5
# Indexing arrays with ranges produces sub-arrays
x = [10..=20]
y = x[5..10]
assert y[0] == 15
assert length(y) == 5

# TODO support from/to ranges

# Control flow

# Single line if statement
is_zero = |x| x == 0
if is_zero 0 then print "Zer0"
if is_zero 1 then print "Zer0" else print "Not Zer0"
assert if is_zero 0 then true else false

# functions in nested scope should be recursive
if true
  fib = |n|
    if n < 2 then n else fib(n - 1) + fib(n - 2)
  print("fib 5:", fib 7)


# Multiline if statement
x = true
if x
  a = 42
  print "In then block"
  assert a == 42

if x == false
  # This comment shoudn't break parsing
  assert false
else
       # ...and neither should this one
  if x == true
      ### or this one
      ###
    print "Nested in else block"


####### Loops

# For statement blocks
for x in 0..10
  for y in -5..5 if (x == y) and (x < 3) # TODO precedence of and
    print (x, y)

# Inline for statement
print("for", i) for i in 0..3

# List comprehensions
c = [square(x) for x in [1, 2, 3]]
print c

filter = |xs, f| [x for x in xs if f(x)] # TODO generator
a = filter(0..20, |x| x > 15)
print a

# for (i, x) in enumerate b
#   print format("{}: {}", i, x)


# ###### Tables
# o = { min: 0, max: 42 }
# sum = 0
# for i in o.min..o.max
#   sum = sum + i

# o = {
#   bar: |x| square x
# }

# x = o.bar(9)
# o = o + { baz = 99 }

# ##### Classes
# class O
#   new: |self| self.foo = 42
#   with_foo: |x|
#     o = new O
#     o.foo = x
#     o
#   print_foo: |self| print self.foo

# o = new O
# o.print_foo()

# ##### Standard Library
# x = math.sin 42
