# This is a comment
print "Hello, World!" # This is a trailing comment

#-
Multiline comments start with #- and end with -#
#- and -# can be nested
-#

###### Basic types and logic
a = true
print a
assert_eq(a, true)
assert false or false or a

assert (4 + 3) == 7
assert_eq(1 + 2 * 3, 7)
assert_eq(2 * 2 + 3, 7)
assert_eq(2 + 5 % 3, 4)

# Multiple value assignment
a, b = true, false
assert_ne(a, b)
a, b, c = 1, 2, 3
assert (a == 1) and (b == 2) and (c == 3)


###### Functions

# Functions are defined with || argument lists
say_hi = || print "Hi!"
say_hi()

# Arguments belong inside the ||s
# Implicit return of last statement in function
square = |x| x * x

# Muliple-argument functions must be called with parentheses
# Single-argument functions can be called with or without parentheses
print("The square of 7 is", square 7)

# Multiple arguments are separated by commas
# Multiline functions are indented after the capture list
# Functions can be nested
add = |x, y|
  x2 = x # Nested trailing comment
  do_add = |x, y|
    x = x + y
    x
  result = do_add(x, y)
  assert x == x2 # function arguments are locally scoped
  print(x, "+", y, "==", result)
  result
assert_eq(add(1, 2), 3)

# functions can call globally defined functions
add2 = |x, y| add(x, y)
assert_eq(add2(4, -4), 0)

# # functions can return multiple values
# # f = |x| x - 1, x + 1
# # a, b = f 0
# # assert a == -1 and b == 1


####### Arrays
z = [10, 10 + 10, 30]
print z

assert_eq(z[1], 20)
assert_eq(z[1 - 1], 10)
y = push(z, 40, 50)
assert_eq(y[3], 40)
print y

assert_eq(length(z), 3)
assert_eq(length(y), 5)

# Arrays get unpacked in multiple assignments - TODO unpacking only for 1 arg
a, b, c = [10, 20], [30, 40]
assert (a == 10) and (b == 20) and (c == 30)

# ###### Ranges

# Ranges are lazily evaluated
r = 0..5
assert_eq(length(r), 5)
print r
# ..= creates an inclusive range
y = 0..=5
assert_eq(length(y), 6)
print y
# Ranges are resolved when inserted in an array
assert_eq(length([10..20]), 10)
assert_eq(length([r]), 5)
# Indexing arrays with ranges produces sub-arrays
z = |n| n
x = [(z 10)..=(z 20)]
y = x[z(5)..(10 + 0)]
assert_eq(y[0], 15)
assert_eq(length(y), 5)
# Multiple expressions assigned to single value get stored in array
a = 1, 2
assert_eq(a, [1, 2])

# TODO support from/to ranges

# Control flow

# Single line if statement
is_zero = |x| x == 0
if is_zero 0 then print "Zer0"
if is_zero 1 then print "Zer0" else print "Not Zer0"
assert if is_zero 0 then true else false

# functions in nested scope should be recursive
if true
  fib = |n|
    if n < 2 then n else fib(n - 1) + fib(n - 2)
  print("fib 5:", fib 7)


# Multiline if statement
x = true
if x
  a = 42
  print "In then block"
  assert a == 42

if x == false
  # This comment shouldn't break parsing
  assert false
else
       # ...and neither should this one
  if x == true
      # or this one
    print "Nested in else block"


####### Loops

# For statement blocks
for x in 0..10
  for y in -5..5 if x == y and x < 3
    print(x, y)

# Inline for statement
print("for", i) for i in 0..3

# List comprehensions
c = [square(x) for x in [1, 2, 3]]
assert_eq(c, [1, 4, 9])

filter = |xs, f| [x for x in xs if f(x)]
a = filter(0..20, |x| x > 15)
assert_eq(a, [16, 17, 18, 19])

enumerate = |xs| [[i, x] for i, x in 0..length(xs), xs]
z = [[c, d] for c, d in enumerate 100..103]
assert_eq(z, [[0, 100], [1, 101], [2, 102]])

# ###### Tables
# o = { min: 0, max: 42 }
# print o
# sum = 0
# for i in o.min..o.max
#   sum = sum + i

# o = {
#   foo: 42
#   bar: |x| square x
# }

# assert o.foo == o["foo"]
# x = o.bar(9)
# z = o + { baz: 99 }
# assert z.bar(2) == 4 and z.baz == 99
# assert table.keys z == ["foo", "bar", "baz"]

# a = { 2: 4, 3: 9 }
# assert z.bar(2) == 4 and z.baz == 99

# ##### Tables as classes

# make_o = || {
#   foo: 42
#   print_foo: |self| print self.foo # self refers to table instance
# }
#
# o = make_o()
# o.print_foo() # implicit self

# make_o2 = || {
#   base: make_o() # base is a convention
#   print_foo2: |self| print self.base.foo # explicit base access
# }
#
# o2 = make_o2()
# o2.print_foo2()



# ###### Classes
# class O
#   new: |self| self.foo = 42
#   with_foo: |x|
#     o = new O
#     o.foo = x
#     o
#   print_foo: |self| print self.foo

# o = new O
# o.print_foo()

# class O2 extends O
#   print_foo2: |self| print super.foo

# o = new O2
# o.print_foo()

# ##### Standard Library
# x = math.sin 42
